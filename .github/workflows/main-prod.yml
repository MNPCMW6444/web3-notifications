name: w3 - main

on:
  push:
    branches:
      - managed-service

permissions:
  actions: read
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      dep_hash: ${{ steps.dep_hash.outputs.DEP_HASH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json


      - name: Check if web3/base image exists
        id: check_web3-base_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE="${ECR_REGISTRY}/web3/base:${DEP_HASH}"
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "BASE_IMAGE_EXISTS=true" >> $GITHUB_ENV
            echo "Image $IMAGE exists."
          else
            echo "BASE_IMAGE_EXISTS=false" >> $GITHUB_ENV
            echo "Image $IMAGE does not exist."
          fi

      - name: Build, tag, and push web3/base image to Amazon ECR
        if: env.BASE_IMAGE_EXISTS == 'false'
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/web3/base:${DEP_HASH} -f ./Dockerfile .
          docker push $ECR_REGISTRY/web3/base:${DEP_HASH}







  build_server:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json


      - name: Build, tag, and push server image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/server:$VERSION -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/web3/server:$VERSION



  build_dashboard:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/dashboard image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/dashboard:$VERSION -f ./apps/dashboard/Dockerfile .
          docker push $ECR_REGISTRY/web3/dashboard:$VERSION






  build_swap:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/swap image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/swap:$VERSION -f ./apps/swap/Dockerfile .
          docker push $ECR_REGISTRY/web3/swap:$VERSION








  build_aave:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/aave image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/aave:$VERSION -f ./apps/aave/Dockerfile .
          docker push $ECR_REGISTRY/web3/aave:$VERSION



