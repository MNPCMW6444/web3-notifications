name: w3 - main

on:
  push:
    branches:
      - main

permissions:
  actions: read
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      dep_hash: ${{ steps.dep_hash.outputs.DEP_HASH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ssh-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Bump version in package.json
        run: |
          npm version patch --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          git config --global user.email "mnpcmw6444@gmail.com"
          git config --global user.name "GitHub Action"
          git commit -am "CI/CD Version auto-increment to $NEW_VERSION [skip ci]"
          git tag v$NEW_VERSION


      - name: Set up Git with SSH for pushing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ACTIONS_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'
          git push git@github.com:${{ github.repository }} HEAD:${{ github.ref_name }}


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json


      - name: Check if web3/base image exists
        id: check_web3-base_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE="${ECR_REGISTRY}/web3/base:${DEP_HASH}"
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "BASE_IMAGE_EXISTS=true" >> $GITHUB_ENV
            echo "Image $IMAGE exists."
          else
            echo "BASE_IMAGE_EXISTS=false" >> $GITHUB_ENV
            echo "Image $IMAGE does not exist."
          fi

      - name: Build, tag, and push web3/base image to Amazon ECR
        if: env.BASE_IMAGE_EXISTS == 'false'
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/web3/base:${DEP_HASH} -f ./Dockerfile .
          docker push $ECR_REGISTRY/web3/base:${DEP_HASH}







  build_server:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json


      - name: Build, tag, and push server image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/server:$VERSION -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/web3/server:$VERSION



  build_dashboard:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/dashboard image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/dashboard:$VERSION -f ./apps/dashboard/Dockerfile .
          docker push $ECR_REGISTRY/web3/dashboard:$VERSION





  build_swap:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/swap image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/swap:$VERSION -f ./apps/swap/Dockerfile .
          docker push $ECR_REGISTRY/web3/swap:$VERSION








  build_aave:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV

      - name: Calculate dependencies hash
        id: dep_hash
        run: |
          jq 'del(.version)' package.json > temp_package.json
          echo "DEP_HASH=$(cat temp_package.json | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          rm temp_package.json

      - name: Build, tag, and push web3/aave image to Amazon ECR
        env:
          DOCKER_BUILDKIT: 1
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker build --build-arg DEP_HASH=${DEP_HASH} -t $ECR_REGISTRY/web3/aave:$VERSION -f ./apps/aave/Dockerfile .
          docker push $ECR_REGISTRY/web3/aave:$VERSION



  deploy_to_ecs:
    needs: [ prepare, build_server, build_dashboard , build_aave  , build_swap ]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.0'

      - name: Extract version from package.json
        run: |
          echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fetch current Server task definition
        id: current-task-def-server
        run: |
          aws ecs describe-task-definition --task-definition w3server > current-w3server-task-def.json

      - name: Fetch current w3dashboard task definition
        id: current-task-defdashboard
        run: |
          aws ecs describe-task-definition --task-definition w3dashboard > current-w3dashboard-task-def.json


      - name: Fetch current s3aave task definition
        id: current-task-defaave
        run: |
          aws ecs describe-task-definition --task-definition s3aave > current-s3aave-task-def.json



      - name: Fetch current w3swap task definition
        id: current-task-defswap
        run: |
          aws ecs describe-task-definition --task-definition w3swap > current-w3swap-task-def.json



      - name: Update task definition for w3server
        run: |
          jq --arg image_tag "$VERSION" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/web3/server:" + $image_tag' current-w3server-task-def.json > intermediate-w3server-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-w3server-task-def.json > final-w3server-task-def.json

      - name: Update task definition for w3dashboard
        run: |
          jq --arg image_tag "$VERSION" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/web3/dashboard:" + $image_tag' current-w3dashboard-task-def.json > intermediate-w3dashboard-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-w3dashboard-task-def.json > final-w3dashboard-task-def.json


      - name: Update task definition for s3aave
        run: |
          jq --arg image_tag "$VERSION" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/web3/aave:" + $image_tag' current-s3aave-task-def.json > intermediate-s3aave-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-s3aave-task-def.json > final-s3aave-task-def.json


      - name: Update task definition for w3swap
        run: |
          jq --arg image_tag "$VERSION" --arg ecr_registry "${{ steps.login-ecr.outputs.registry }}" '.taskDefinition.containerDefinitions[0].image = $ecr_registry + "/web3/swap:" + $image_tag' current-w3swap-task-def.json > intermediate-w3swap-task-def.json
          jq '.taskDefinition | del(.taskDefinitionArn, .status, .revision, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' intermediate-w3swap-task-def.json > final-w3swap-task-def.json



      - name: Register task definition for server
        id: register-task-def-server
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-w3server-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN_SERVER=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Register task definition for w3dashboard
        id: register-task-def-w3dashboard
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-w3dashboard-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN_DASH=$TASK_DEF_ARN" >> $GITHUB_ENV



      - name: Register task definition for s3aave
        id: register-task-def-s3aave
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-s3aave-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN_AAVE=$TASK_DEF_ARN" >> $GITHUB_ENV



      - name: Register task definition for w3swap
        id: register-task-def-w3swap
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://final-w3swap-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEF_ARN_SWAP=$TASK_DEF_ARN" >> $GITHUB_ENV


      - name: Update ECS Service for server
        run: |
          aws ecs update-service --cluster w3 --service server --task-definition $TASK_DEF_ARN_SERVER

      - name: Update ECS Service for dashbaord
        run: |
          aws ecs update-service --cluster w3 --service dashbaord --task-definition $TASK_DEF_ARN_DASH



      - name: Update ECS Service for aave
        run: |
          aws ecs update-service --cluster w3 --service aave --task-definition $TASK_DEF_ARN_AAVE

      - name: Update ECS Service for swap
        run: |
          aws ecs update-service --cluster w3 --service swap --task-definition $TASK_DEF_ARN_SWAP

